import instaloader
import pandas as pd
import plotly.graph_objects as go
from flask import Flask, render_template, request, send_file
from fpdf import FPDF
import os
import tempfile

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/analyze', methods=['POST'])
def analyze():
    username = request.form['username']
    basic_info, follower_count, post_count, df = get_instagram_data(username)
    performance_stats, recommendations = analyze_competitor_data(df, follower_count)

    # Create an interactive scatter plot using Plotly graph_objects
    fig = go.Figure()

    # Scatter plot for each post
    fig.add_trace(go.Scatter(
        x=df['Date'],
        y=df['Time'],
        mode='markers',
        marker=dict(size=df['Interactions'], sizemode='area', sizeref=0.1),
        text=df['Date'].astype(str) + '<br>' + df['Time'] + '<br>' + 'Interactions: ' + df['Interactions'].astype(str),
        hoverinfo='text',
        name='Posts',
    ))

    # Update layout
    fig.update_layout(
        title='Posts Over Time',
        xaxis_title='Date',
        yaxis_title='Time of Day',
        template='plotly_white',
        showlegend=False,  # Remove legend for scatter plot
    )

    # Get JSON representation of the graph data and convert it to a JSON string
    graph_json = fig.to_json()

    pdf_file_path = save_data_to_pdf(username, basic_info, follower_count, post_count, performance_stats, recommendations)
    
    # Extract the filename from the pdf_file_path
    pdf_filename = os.path.basename(pdf_file_path)

    return render_template('result.html', username=username, basic_info=basic_info,
                           follower_count=follower_count, post_count=post_count,
                           performance_stats=performance_stats, recommendations=recommendations,
                           graph_json=graph_json, pdf_file=pdf_file_path, pdf_filename=pdf_filename)


def get_instagram_data(username):
    L = instaloader.Instaloader()
    profile = instaloader.Profile.from_username(L.context, username)

    basic_info = {
        'Full Name': profile.full_name,
        'Bio': profile.biography,
        'Website': profile.external_url
    }

    follower_count = profile.followers
    post_count = profile.mediacount

    data = []
    for post in profile.get_posts():
        data.append({
            'Date': post.date_utc.date(),
            'Time': post.date_utc.strftime('%I:%M %p'),  # Convert time to 12-hour format
            'Interactions': post.likes + post.comments
        })

    df = pd.DataFrame(data)

    return basic_info, follower_count, post_count, df

def analyze_competitor_data(df, follower_count):
    total_interactions = df['Interactions'].sum()
    average_likes_per_post = df['Interactions'].mean()
    average_comments_per_post = df['Interactions'].mean()
    engagement_rate = (total_interactions / follower_count) * 100

    recommendations = []
    if average_likes_per_post < 50:
        recommendations.append("Focus on creating more engaging content to increase likes per post.")
    if average_comments_per_post < 10:
        recommendations.append("Encourage more audience interaction by posting content that prompts comments.")
    if engagement_rate < 5:
        recommendations.append("Improve engagement with the audience by responding to comments and messages.")

    performance_stats = {
        'Total Interactions': total_interactions,
        'Average Likes per Post': round(average_likes_per_post),
        'Average Comments per Post': round(average_comments_per_post),
        'Engagement Rate': round(engagement_rate),
    }

    return performance_stats, recommendations

def save_data_to_pdf(username, basic_info, follower_count, post_count, performance_stats, recommendations):
    pdf = FPDF()
    pdf.add_page()

    # Set font properties
    pdf.set_font("Arial", size=12)

    # Add title and basic information
    pdf.cell(200, 10, txt=f"Instagram Analysis for {username}", ln=True, align="C")
    pdf.cell(200, 10, txt="Generated by InstaBoard", ln=True, align="C")  # Replace with your app's name
    pdf.cell(200, 10, txt="", ln=True)  # Add a new line
    pdf.cell(200, 10, txt="Basic Information:", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Full Name: {basic_info['Full Name']}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Bio: {basic_info['Bio']}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Website: {basic_info['Website']}", ln=True, align="L")

    # Add statistics and recommendations
    pdf.cell(200, 10, txt="", ln=True)  # Add a new line
    pdf.cell(200, 10, txt="Statistics:", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Follower Count: {follower_count}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Post Count: {post_count}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Engagement Rate: {int(performance_stats['Engagement Rate'])}%", ln=True, align="L")  # Display without decimal places

    pdf.cell(200, 10, txt="", ln=True)  # Add a new line
    pdf.cell(200, 10, txt="Performance Statistics:", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Total Interactions: {performance_stats['Total Interactions']}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Average Likes per Post: {performance_stats['Average Likes per Post']:.2f}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Average Comments per Post: {performance_stats['Average Comments per Post']:.2f}", ln=True, align="L")
    pdf.cell(200, 10, txt=f"Engagement Rate: {int(performance_stats['Engagement Rate'])}%", ln=True, align="L")  # Display without decimal places

    pdf.cell(200, 10, txt="", ln=True)  # Add a new line
    pdf.cell(200, 10, txt="Recommendations:", ln=True, align="L")
    for recommendation in recommendations:
        pdf.cell(200, 10, txt=recommendation, ln=True, align="L")

    # Save the PDF to a temporary file
    pdf_file_path = os.path.join(tempfile.gettempdir(), f"{username}_analysis.pdf")
    pdf.output(pdf_file_path)

    return pdf_file_path

if __name__ == '__main__':
    app.run(debug=True)
